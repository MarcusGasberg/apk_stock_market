@startuml StockMarketClassDiagrak
skinparam Monochrome true
skinparam Shadowing false
left to right direction

note as N2
  TraderClient reads input from keyboard 0 - 7
  and creates command based on user input 
  1: Buy Stock
  2: Sell Stock
  3: List All Transactions 
  4: Undo Latest 
  5: List All Available Stocks 
  6: List Owned Stocks 
  7: Deposit Funds 
end note

class TraderClient {
  + boost::signal<...> command_signal 
  + boost::signal<...> queries_signal
}

class TransactionManager {
  - vector<commands_var_t> all_transactions_
  + do_transaction(commands_var_t command): void
  + undo_latest_transaction()
} 

class PriceProvider {
  - map<id, price> price_map_ 
  + get_price(id) : shared_ptr<Price>
}

class BuyStockCommand {
  - shared_ptr<TraderAccount> buyer_account_ 
  - string stock_id_; 
  + execute() : bool
  + undo() : bool
}

class StockBroker {
  - Stock[] stocks_for_sale
  - map<string, boost::connection> connections_
  - shared_ptr<Mediator<...>> mediator_
  + get_stocks(): GetAllStockQuery
  + get_stock_price(): GetPriceQuery 
  + get_stock(): GetStockQuery  
}

class StockMediator {
  - boost::signal<...> provider_signal_ 
  + subscribe(topic, callback, callbackObject) : boost::connection
  + unSubscribe(topic, connection) : void 
}

class CommandBuilder {
  - shared_ptr<TraderAccount> trader_account_ 
  - boost::signal<...> queries_signal 
  + create_command(choice): shared_ptr<commands_var_t> 
}

class TraderAccount {
  - int balance_ 
  - vector<Stock> owned_stocks_ 
  - shared_ptr<Mediator<...>> mediator_ 
  + boy_stock(stock_id) : bool 
  + sell_stock(stock_id) : bool 
}

class TraderPolicy {
  + calculateCommission(boughtAmount, Price): T 
}

TraderClient --* CommandBuilder
CommandBuilder --o TraderAccount
TraderAccount --o StockMediator 
TraderAccount --* TraderPolicy
StockBroker --o StockMediator
BuyStockCommand --o TraderAccount
StockBroker --o PriceProvider
TransactionManager --o BuyStockCommand
@enduml